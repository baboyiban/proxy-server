services:
  traefik:
    image: traefik:v2.10
    container_name: traefik
    restart: unless-stopped
    command:
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.mqtttls.address=:8883" # MQTT TCP용 TCP entrypoint
      - "--certificatesresolvers.myresolver.acme.tlschallenge=true"
      - "--certificatesresolvers.myresolver.acme.email=${EMAIL}"
      - "--certificatesresolvers.myresolver.acme.storage=/letsencrypt/acme.json"
      - "--entrypoints.web.http.redirections.entryPoint.to=websecure"
    ports:
      - "80:80"
      - "443:443"
      - "8080:8080" # Traefik 대시보드
      - "8883:8883" # MQTT TCP TLS
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
      - "./letsencrypt:/letsencrypt"
    environment:
      - EMAIL=${EMAIL}
    networks:
      - backend

  backend:
    platform: linux/amd64
    image: chl11wq12/kosta-2-backend:v1.0.0
    container_name: backend
    build:
      context: ./backend
      dockerfile: Dockerfile
    env_file: .env
    ports:
      - ${BACKEND_PORT}:${BACKEND_PORT}
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.api.rule=Host(`${BACKEND_DOMAIN}`)"
      - "traefik.http.routers.api.entrypoints=websecure"
      - "traefik.http.routers.api.tls.certresolver=myresolver"
      - "traefik.http.services.api.loadbalancer.server.port=${BACKEND_PORT}"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolalloworiginlist=${FRONTEND_URL}"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.api-cors.headers.accesscontrolmaxage=100"
      - "traefik.http.routers.api.middlewares=api-cors@docker"

  frontend:
    platform: linux/amd64
    image: chl11wq12/kosta-2-frontend:v1.0.0
    container_name: frontend
    build:
      context: ./frontend
      dockerfile: Dockerfile
    env_file: .env
    environment:
      - NODE_ENV=production
      - PORT=${FRONTEND_PORT}
      - DOMAIN=${FRONTEND_DOMAIN}
      - API_URL=${BACKEND_URL}
      - BASE_URL=${FRONTEND_URL}
      - JWT_SECRET=${JWT_SECRET}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.front.rule=Host(`${FRONTEND_DOMAIN}`)"
      - "traefik.http.routers.front.entrypoints=websecure"
      - "traefik.http.routers.front.tls.certresolver=myresolver"
      - "traefik.http.services.front.loadbalancer.server.port=${FRONTEND_PORT}"
    restart: unless-stopped
    networks:
      - backend

  mqtt:
    platform: linux/amd64
    image: chl11wq12/kosta-2-mqtt:v1.0.0
    container_name: mqtt
    build:
      context: ./mqtt
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      - REDIS_ADDR=redis:6379
    ports:
      - "1883:1883"
      - "8083:8083"
    depends_on:
      - redis
    networks:
      - backend
    labels:
      - "traefik.enable=true"
      # WebSocket(wss)용 HTTP 라우터
      - "traefik.http.routers.mqtt-ws.rule=Host(`${MQTT_DOMAIN}`) && Path(`/mqtt`)"
      - "traefik.http.routers.mqtt-ws.entrypoints=websecure"
      - "traefik.http.routers.mqtt-ws.tls.certresolver=myresolver"
      - "traefik.http.services.mqtt-ws.loadbalancer.server.port=8083"
      # WebSocket CORS 설정
      - "traefik.http.middlewares.mqtt-cors.headers.accesscontrolalloworiginlist=*"
      - "traefik.http.middlewares.mqtt-cors.headers.accesscontrolallowmethods=GET,OPTIONS,PUT,POST,DELETE"
      - "traefik.http.middlewares.mqtt-cors.headers.accesscontrolallowheaders=*"
      - "traefik.http.middlewares.mqtt-cors.headers.accesscontrolmaxage=86400"
      - "traefik.http.routers.mqtt-ws.middlewares=mqtt-cors@docker"
      # --- 추가된 부분: MQTTS(TCP)용 라우터 및 서비스 ---
      - "traefik.tcp.routers.mqtt-tcp.rule=HostSNI(`*`)"
      - "traefik.tcp.routers.mqtt-tcp.entrypoints=mqtttls"
      - "traefik.tcp.routers.mqtt-tcp.tls=true"
      - "traefik.tcp.routers.mqtt-tcp.service=mqtt-tcp-svc"
      - "traefik.tcp.services.mqtt-tcp-svc.loadbalancer.server.port=1883"

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - backend

networks:
  backend:
    driver: bridge

volumes:
  redis-data:
